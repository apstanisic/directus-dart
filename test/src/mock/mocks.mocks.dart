// Mocks generated by Mockito 5.0.16 from annotations
// in directus/test/src/mock/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:dio/dio.dart' as _i2;
import 'package:dio/src/interceptor.dart' as _i7;
import 'package:directus/src/data_classes/data_classes.dart' as _i4;
import 'package:directus/src/data_classes/directus_list_response.dart' as _i5;
import 'package:directus/src/modules/auth/_auth_fields.dart' as _i6;
import 'package:directus/src/modules/auth/_auth_response.dart' as _i11;
import 'package:directus/src/modules/auth/_auth_storage.dart' as _i10;
import 'package:directus/src/modules/items/items_converter.dart' as _i3;
import 'package:directus/src/modules/items/items_handler.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDio_0 extends _i1.Fake implements _i2.Dio {}

class _FakeItemsConverter_1<T> extends _i1.Fake
    implements _i3.ItemsConverter<T> {}

class _FakeDirectusResponse_2<T> extends _i1.Fake
    implements _i4.DirectusResponse<T> {}

class _FakeDirectusListResponse_3<T> extends _i1.Fake
    implements _i5.DirectusListResponse<T> {}

class _FakeBaseOptions_4 extends _i1.Fake implements _i2.BaseOptions {}

class _FakeHttpClientAdapter_5 extends _i1.Fake
    implements _i2.HttpClientAdapter {}

class _FakeTransformer_6 extends _i1.Fake implements _i2.Transformer {}

class _FakeInterceptors_7 extends _i1.Fake implements _i2.Interceptors {}

class _FakeResponse_8<T> extends _i1.Fake implements _i2.Response<T> {}

class _FakeDirectusStorage_9 extends _i1.Fake implements _i4.DirectusStorage {}

class _FakeAuthFields_10 extends _i1.Fake implements _i6.AuthFields {}

class _FakeInterceptorState_11<T> extends _i1.Fake
    implements _i7.InterceptorState<T> {}

/// A class which mocks [ItemsHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemsHandler<T> extends _i1.Mock implements _i8.ItemsHandler<T> {
  MockItemsHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client =>
      (super.noSuchMethod(Invocation.getter(#client), returnValue: _FakeDio_0())
          as _i2.Dio);
  @override
  set client(_i2.Dio? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  _i3.ItemsConverter<dynamic> get converter =>
      (super.noSuchMethod(Invocation.getter(#converter),
              returnValue: _FakeItemsConverter_1<dynamic>())
          as _i3.ItemsConverter<dynamic>);
  @override
  set converter(_i3.ItemsConverter<dynamic>? _converter) =>
      super.noSuchMethod(Invocation.setter(#converter, _converter),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i4.DirectusResponse<T>> readOne(String? id,
          {_i4.OneQuery? query}) =>
      (super.noSuchMethod(Invocation.method(#readOne, [id], {#query: query}),
              returnValue: Future<_i4.DirectusResponse<T>>.value(
                  _FakeDirectusResponse_2<T>()))
          as _i9.Future<_i4.DirectusResponse<T>>);
  @override
  _i9.Future<_i5.DirectusListResponse<T>> readMany(
          {_i4.Query? query, _i4.Filters? filters}) =>
      (super.noSuchMethod(
          Invocation.method(#readMany, [], {#query: query, #filters: filters}),
          returnValue: Future<_i5.DirectusListResponse<T>>.value(
              _FakeDirectusListResponse_3<T>())) as _i9
          .Future<_i5.DirectusListResponse<T>>);
  @override
  _i9.Future<_i4.DirectusResponse<T>> createOne(T? data) =>
      (super.noSuchMethod(Invocation.method(#createOne, [data]),
              returnValue: Future<_i4.DirectusResponse<T>>.value(
                  _FakeDirectusResponse_2<T>()))
          as _i9.Future<_i4.DirectusResponse<T>>);
  @override
  _i9.Future<_i5.DirectusListResponse<T>> createMany(List<T>? data) =>
      (super.noSuchMethod(Invocation.method(#createMany, [data]),
              returnValue: Future<_i5.DirectusListResponse<T>>.value(
                  _FakeDirectusListResponse_3<T>()))
          as _i9.Future<_i5.DirectusListResponse<T>>);
  @override
  _i9.Future<_i4.DirectusResponse<T>> updateOne({T? data, String? id}) => (super
      .noSuchMethod(Invocation.method(#updateOne, [], {#data: data, #id: id}),
          returnValue: Future<_i4.DirectusResponse<T>>.value(
              _FakeDirectusResponse_2<T>())) as _i9
      .Future<_i4.DirectusResponse<T>>);
  @override
  _i9.Future<_i5.DirectusListResponse<T>> updateMany(
          {List<String>? ids, T? data}) =>
      (super.noSuchMethod(
              Invocation.method(#updateMany, [], {#ids: ids, #data: data}),
              returnValue: Future<_i5.DirectusListResponse<T>>.value(
                  _FakeDirectusListResponse_3<T>()))
          as _i9.Future<_i5.DirectusListResponse<T>>);
  @override
  _i9.Future<void> deleteOne(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteOne, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> deleteMany(List<String>? ids) =>
      (super.noSuchMethod(Invocation.method(#deleteMany, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DirectusStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectusStorage extends _i1.Mock implements _i4.DirectusStorage {
  MockDirectusStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> setItem(String? key, Object? value) =>
      (super.noSuchMethod(Invocation.method(#setItem, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<Object?> getItem(String? key) =>
      (super.noSuchMethod(Invocation.method(#getItem, [key]),
          returnValue: Future<Object?>.value()) as _i9.Future<Object?>);
  @override
  _i9.Future<void> removeItem(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeItem, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i2.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options =>
      (super.noSuchMethod(Invocation.getter(#options),
          returnValue: _FakeBaseOptions_4()) as _i2.BaseOptions);
  @override
  set options(_i2.BaseOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  _i2.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(Invocation.getter(#httpClientAdapter),
          returnValue: _FakeHttpClientAdapter_5()) as _i2.HttpClientAdapter);
  @override
  set httpClientAdapter(_i2.HttpClientAdapter? _httpClientAdapter) => super
      .noSuchMethod(Invocation.setter(#httpClientAdapter, _httpClientAdapter),
          returnValueForMissingStub: null);
  @override
  _i2.Transformer get transformer =>
      (super.noSuchMethod(Invocation.getter(#transformer),
          returnValue: _FakeTransformer_6()) as _i2.Transformer);
  @override
  set transformer(_i2.Transformer? _transformer) =>
      super.noSuchMethod(Invocation.setter(#transformer, _transformer),
          returnValueForMissingStub: null);
  @override
  _i2.Interceptors get interceptors =>
      (super.noSuchMethod(Invocation.getter(#interceptors),
          returnValue: _FakeInterceptors_7()) as _i2.Interceptors);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i2.Response<T>> get<T>(String? path,
          {Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> getUri<T>(Uri? uri,
          {_i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getUri, [
                uri
              ], {
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> post<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> postUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> put<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> putUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#putUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> head<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> headUri<T>(Uri? uri,
          {dynamic data, _i2.Options? options, _i2.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#headUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> delete<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> deleteUri<T>(Uri? uri,
          {dynamic data, _i2.Options? options, _i2.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> patch<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> patchUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patchUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  void lock() => super.noSuchMethod(Invocation.method(#lock, []),
      returnValueForMissingStub: null);
  @override
  void unlock() => super.noSuchMethod(Invocation.method(#unlock, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<_i2.Response<dynamic>> download(String? urlPath, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          Map<String, dynamic>? queryParameters,
          _i2.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#download, [
                urlPath,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i2.Response<dynamic>>.value(
                  _FakeResponse_8<dynamic>()))
          as _i9.Future<_i2.Response<dynamic>>);
  @override
  _i9.Future<_i2.Response<dynamic>> downloadUri(Uri? uri, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          _i2.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadUri, [
                uri,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i2.Response<dynamic>>.value(
                  _FakeResponse_8<dynamic>()))
          as _i9.Future<_i2.Response<dynamic>>);
  @override
  _i9.Future<_i2.Response<T>> request<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> requestUri<T>(Uri? uri,
          {dynamic data,
          _i2.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#requestUri, [
                uri
              ], {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  _i9.Future<_i2.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(Invocation.method(#fetch, [requestOptions]),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_8<T>()))
          as _i9.Future<_i2.Response<T>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaseOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseOptions extends _i1.Mock implements _i2.BaseOptions {
  MockBaseOptions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get setRequestContentTypeWhenNoPayload => (super.noSuchMethod(
      Invocation.getter(#setRequestContentTypeWhenNoPayload),
      returnValue: false) as bool);
  @override
  set setRequestContentTypeWhenNoPayload(
          bool? _setRequestContentTypeWhenNoPayload) =>
      super.noSuchMethod(
          Invocation.setter(#setRequestContentTypeWhenNoPayload,
              _setRequestContentTypeWhenNoPayload),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  int get sendTimeout =>
      (super.noSuchMethod(Invocation.getter(#sendTimeout), returnValue: 0)
          as int);
  @override
  set sendTimeout(int? _sendTimeout) =>
      super.noSuchMethod(Invocation.setter(#sendTimeout, _sendTimeout),
          returnValueForMissingStub: null);
  @override
  int get receiveTimeout =>
      (super.noSuchMethod(Invocation.getter(#receiveTimeout), returnValue: 0)
          as int);
  @override
  set receiveTimeout(int? _receiveTimeout) =>
      super.noSuchMethod(Invocation.setter(#receiveTimeout, _receiveTimeout),
          returnValueForMissingStub: null);
  @override
  _i2.ResponseType get responseType =>
      (super.noSuchMethod(Invocation.getter(#responseType),
          returnValue: _i2.ResponseType.json) as _i2.ResponseType);
  @override
  set responseType(_i2.ResponseType? _responseType) =>
      super.noSuchMethod(Invocation.setter(#responseType, _responseType),
          returnValueForMissingStub: null);
  @override
  _i2.ValidateStatus get validateStatus =>
      (super.noSuchMethod(Invocation.getter(#validateStatus),
          returnValue: (int? status) => false) as _i2.ValidateStatus);
  @override
  set validateStatus(_i2.ValidateStatus? _validateStatus) =>
      super.noSuchMethod(Invocation.setter(#validateStatus, _validateStatus),
          returnValueForMissingStub: null);
  @override
  bool get receiveDataWhenStatusError =>
      (super.noSuchMethod(Invocation.getter(#receiveDataWhenStatusError),
          returnValue: false) as bool);
  @override
  set receiveDataWhenStatusError(bool? _receiveDataWhenStatusError) =>
      super.noSuchMethod(
          Invocation.setter(
              #receiveDataWhenStatusError, _receiveDataWhenStatusError),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  set requestEncoder(_i2.RequestEncoder? _requestEncoder) =>
      super.noSuchMethod(Invocation.setter(#requestEncoder, _requestEncoder),
          returnValueForMissingStub: null);
  @override
  set responseDecoder(_i2.ResponseDecoder? _responseDecoder) =>
      super.noSuchMethod(Invocation.setter(#responseDecoder, _responseDecoder),
          returnValueForMissingStub: null);
  @override
  _i2.ListFormat get listFormat =>
      (super.noSuchMethod(Invocation.getter(#listFormat),
          returnValue: _i2.ListFormat.csv) as _i2.ListFormat);
  @override
  set listFormat(_i2.ListFormat? _listFormat) =>
      super.noSuchMethod(Invocation.setter(#listFormat, _listFormat),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set headers(Map<String, dynamic>? headers) =>
      super.noSuchMethod(Invocation.setter(#headers, headers),
          returnValueForMissingStub: null);
  @override
  set contentType(String? contentType) =>
      super.noSuchMethod(Invocation.setter(#contentType, contentType),
          returnValueForMissingStub: null);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get queryParameters =>
      (super.noSuchMethod(Invocation.getter(#queryParameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set queryParameters(Map<String, dynamic>? _queryParameters) =>
      super.noSuchMethod(Invocation.setter(#queryParameters, _queryParameters),
          returnValueForMissingStub: null);
  @override
  int get connectTimeout =>
      (super.noSuchMethod(Invocation.getter(#connectTimeout), returnValue: 0)
          as int);
  @override
  set connectTimeout(int? _connectTimeout) =>
      super.noSuchMethod(Invocation.setter(#connectTimeout, _connectTimeout),
          returnValueForMissingStub: null);
  @override
  _i2.BaseOptions copyWith(
          {String? method,
          String? baseUrl,
          Map<String, dynamic>? queryParameters,
          String? path,
          int? connectTimeout,
          int? receiveTimeout,
          int? sendTimeout,
          Map<String, dynamic>? extra,
          Map<String, dynamic>? headers,
          _i2.ResponseType? responseType,
          String? contentType,
          _i2.ValidateStatus? validateStatus,
          bool? receiveDataWhenStatusError,
          bool? followRedirects,
          int? maxRedirects,
          _i2.RequestEncoder? requestEncoder,
          _i2.ResponseDecoder? responseDecoder,
          _i2.ListFormat? listFormat,
          bool? setRequestContentTypeWhenNoPayload}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #method: method,
            #baseUrl: baseUrl,
            #queryParameters: queryParameters,
            #path: path,
            #connectTimeout: connectTimeout,
            #receiveTimeout: receiveTimeout,
            #sendTimeout: sendTimeout,
            #extra: extra,
            #headers: headers,
            #responseType: responseType,
            #contentType: contentType,
            #validateStatus: validateStatus,
            #receiveDataWhenStatusError: receiveDataWhenStatusError,
            #followRedirects: followRedirects,
            #maxRedirects: maxRedirects,
            #requestEncoder: requestEncoder,
            #responseDecoder: responseDecoder,
            #listFormat: listFormat,
            #setRequestContentTypeWhenNoPayload:
                setRequestContentTypeWhenNoPayload
          }),
          returnValue: _FakeBaseOptions_4()) as _i2.BaseOptions);
  @override
  String? contentTypeWithRequestBody(String? method) => (super.noSuchMethod(
      Invocation.method(#contentTypeWithRequestBody, [method])) as String?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStorage extends _i1.Mock implements _i10.AuthStorage {
  MockAuthStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DirectusStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeDirectusStorage_9()) as _i4.DirectusStorage);
  @override
  _i6.AuthFields get fields => (super.noSuchMethod(Invocation.getter(#fields),
      returnValue: _FakeAuthFields_10()) as _i6.AuthFields);
  @override
  _i9.Future<void> storeLoginData(_i11.AuthResponse? data) =>
      (super.noSuchMethod(Invocation.method(#storeLoginData, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i11.AuthResponse?> getLoginData() =>
      (super.noSuchMethod(Invocation.method(#getLoginData, []),
              returnValue: Future<_i11.AuthResponse?>.value())
          as _i9.Future<_i11.AuthResponse?>);
  @override
  _i9.Future<void> removeLoginData() =>
      (super.noSuchMethod(Invocation.method(#removeLoginData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RequestInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestInterceptorHandler extends _i1.Mock
    implements _i2.RequestInterceptorHandler {
  MockRequestInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i7.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(Invocation.getter(#future),
              returnValue: Future<_i7.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState_11<dynamic>()))
          as _i9.Future<_i7.InterceptorState<dynamic>>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void next(_i2.RequestOptions? requestOptions) =>
      super.noSuchMethod(Invocation.method(#next, [requestOptions]),
          returnValueForMissingStub: null);
  @override
  void resolve(_i2.Response<dynamic>? response,
          [bool? callFollowingResponseInterceptor = false]) =>
      super.noSuchMethod(
          Invocation.method(
              #resolve, [response, callFollowingResponseInterceptor]),
          returnValueForMissingStub: null);
  @override
  void reject(_i2.DioError? error,
          [bool? callFollowingErrorInterceptor = false]) =>
      super.noSuchMethod(
          Invocation.method(#reject, [error, callFollowingErrorInterceptor]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
